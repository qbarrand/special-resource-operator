diff --color -uNr vendor-old/github.com/google/go-containerregistry/pkg/crane/options.patch.go vendor/github.com/google/go-containerregistry/pkg/crane/options.patch.go
--- vendor-old/github.com/google/go-containerregistry/pkg/crane/options.patch.go	1970-01-01 01:00:00.000000000 +0100
+++ vendor/github.com/google/go-containerregistry/pkg/crane/options.patch.go	2021-10-29 09:02:30.624278456 +0200
@@ -0,0 +1,5 @@
+package crane
+
+func NilOption(o *options) {
+	//	o.name = append(o.name, name.StrictValidation)
+}
diff --color -uNr vendor-old/helm.sh/helm/v3/pkg/action/action.patch.go vendor/helm.sh/helm/v3/pkg/action/action.patch.go
--- vendor-old/helm.sh/helm/v3/pkg/action/action.patch.go	1970-01-01 01:00:00.000000000 +0100
+++ vendor/helm.sh/helm/v3/pkg/action/action.patch.go	2021-10-29 09:02:30.629278465 +0200
@@ -0,0 +1,28 @@
+package action
+
+import (
+	"helm.sh/helm/v3/pkg/chart"
+	"helm.sh/helm/v3/pkg/release"
+	"k8s.io/cli-runtime/pkg/resource"
+)
+
+func (i *Install) InstallCRDs(crds []chart.CRD) error {
+	return i.installCRDs(crds)
+}
+
+func (i *Install) ReplaceRelease(rel *release.Release) error {
+	return i.replaceRelease(rel)
+}
+
+func SetMetadataVisitor(releaseName, releaseNamespace string, force bool) resource.VisitorFunc {
+	return setMetadataVisitor(releaseName, releaseNamespace, force)
+}
+
+func (cfg *Configuration) DeleteHookByPolicy(h *release.Hook, policy release.HookDeletePolicy) error {
+	return cfg.deleteHookByPolicy(h, policy)
+}
+
+// recordRelease with an update operation in case reuse has been set.
+func (c *Configuration) RecordRelease(r *release.Release) {
+	c.recordRelease(r)
+}
diff --color -uNr vendor-old/helm.sh/helm/v3/pkg/action/install.patch.go vendor/helm.sh/helm/v3/pkg/action/install.patch.go
--- vendor-old/helm.sh/helm/v3/pkg/action/install.patch.go	1970-01-01 01:00:00.000000000 +0100
+++ vendor/helm.sh/helm/v3/pkg/action/install.patch.go	2021-10-29 09:02:30.630278466 +0200
@@ -0,0 +1,19 @@
+package action
+
+import (
+	"time"
+
+	"helm.sh/helm/v3/pkg/release"
+)
+
+func (i *Install) FailRelease(rel *release.Release, err error) (*release.Release, error) {
+	return i.failRelease(rel, err)
+}
+
+func (cfg *Configuration) ExecHook(rl *release.Release, hook release.HookEvent, timeout time.Duration) error {
+	return cfg.execHook(rl, hook, timeout)
+}
+
+func (i *Install) RecordRelease(r *release.Release) error {
+	return i.recordRelease(r)
+}
diff --color -uNr vendor-old/helm.sh/helm/v3/pkg/getter/getter.go vendor/helm.sh/helm/v3/pkg/getter/getter.go
--- vendor-old/helm.sh/helm/v3/pkg/getter/getter.go	2021-10-29 09:01:49.527145751 +0200
+++ vendor/helm.sh/helm/v3/pkg/getter/getter.go	2021-10-29 09:03:18.405362203 +0200
@@ -170,7 +170,7 @@
 // Currently, the built-in getters and the discovered plugins with downloader
 // notations are collected.
 func All(settings *cli.EnvSettings) Providers {
-	result := Providers{httpProvider, ociProvider}
+	result := Providers{httpProvider, ociProvider, fileProvider, configMapProvider}
 	pluginDownloaders, _ := collectPlugins(settings)
 	result = append(result, pluginDownloaders...)
 	return result
diff --color -uNr vendor-old/helm.sh/helm/v3/pkg/getter/getter.patch.go vendor/helm.sh/helm/v3/pkg/getter/getter.patch.go
--- vendor-old/helm.sh/helm/v3/pkg/getter/getter.patch.go	1970-01-01 01:00:00.000000000 +0100
+++ vendor/helm.sh/helm/v3/pkg/getter/getter.patch.go	2021-10-29 09:02:30.626278459 +0200
@@ -0,0 +1,115 @@
+package getter
+
+import (
+	"bytes"
+	"context"
+	"errors"
+	"fmt"
+	"io/ioutil"
+	"os"
+	"strings"
+
+	"helm.sh/helm/v3/pkg/kube"
+	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
+	"k8s.io/client-go/kubernetes"
+)
+
+var fileProvider = Provider{
+	Schemes: []string{"file"},
+	New:     NewFileGetter,
+}
+
+type FileGetter struct {
+}
+
+func (g *FileGetter) Get(href string, option ...Option) (*bytes.Buffer, error) {
+
+	ref := strings.TrimPrefix(href, "file://")
+
+	if _, err := os.Stat(ref); err == nil {
+		file, err := ioutil.ReadFile(ref)
+		if err == nil {
+			return bytes.NewBuffer(file), nil
+		}
+
+	} else if os.IsNotExist(err) {
+		// path/to/whatever does *not* exist
+		fmt.Printf("getter.go: ERROR FILE DOES NOT EXISTS %+v\n", err)
+		os.Exit(1)
+
+	} else {
+		// Schrodinger: file may or may not exist. See err for details.
+		// Therefore, do *NOT* use !os.IsNotExist(err) to test for file existence
+		fmt.Printf("ERROR SCHROEDINGER FILE  %+v\n", err)
+		os.Exit(1)
+	}
+
+	return nil, nil
+}
+
+func NewFileGetter(options ...Option) (Getter, error) {
+	var client FileGetter
+
+	return &client, nil
+}
+
+// ------------- ConfigMap Provider --------------------------------------------
+
+var configMapProvider = Provider{
+	Schemes: []string{"cm"},
+	New:     NewConfigMapGetter,
+}
+
+type ConfigMapGetter struct {
+	kc *kubernetes.Clientset
+}
+
+func (g *ConfigMapGetter) Get(href string, option ...Option) (*bytes.Buffer, error) {
+
+	fmt.Printf("HREF %s\n", href)
+	namespacedName := strings.TrimPrefix(href, "cm://")
+	s := strings.Split(namespacedName, "/")
+	if len(s) < 3 {
+		return nil, errors.New("Malformed cm:// URL, cm://<NAMESPACE>/<NAME>")
+	}
+
+	opts := metav1.GetOptions{}
+
+	chart, err := g.kc.CoreV1().ConfigMaps(s[0]).Get(context.TODO(), s[1], opts)
+	if err != nil {
+		return nil, errors.New(fmt.Sprintf("Cannot find ConfigMap with provided URL: cm://%s/%s", s[0], s[1]))
+	}
+
+	asciiData := chart.Data
+	binaryData := chart.BinaryData
+
+	if strings.Contains(s[2], "index.yaml") {
+
+		if _, ok := asciiData["index.yaml"]; !ok {
+			return nil, errors.New(fmt.Sprintf("Cannot find index.yaml in CM %+v\n", asciiData))
+		}
+		return bytes.NewBuffer([]byte(asciiData["index.yaml"])), nil
+	}
+
+	for k, v := range binaryData {
+		if s[2] == k {
+			return bytes.NewBuffer(v), nil
+		}
+	}
+
+	return nil, errors.New(fmt.Sprintf("Cannot find any asciiData | binaryData in CM %+v\n", chart))
+
+}
+
+func NewConfigMapGetter(options ...Option) (Getter, error) {
+	var client ConfigMapGetter
+	var err error
+
+	cl := kube.New(nil)
+	client.kc, err = cl.Factory.KubernetesClientSet()
+	if err != nil {
+		panic(err)
+	}
+
+	return &client, nil
+}
