diff --color -uNr vendor-old/github.com/google/go-containerregistry/pkg/crane/options.patch.go vendor/github.com/google/go-containerregistry/pkg/crane/options.patch.go
--- vendor-old/github.com/google/go-containerregistry/pkg/crane/options.patch.go	1970-01-01 01:00:00.000000000 +0100
+++ vendor/github.com/google/go-containerregistry/pkg/crane/options.patch.go	2021-10-29 09:02:30.624278456 +0200
@@ -0,0 +1,5 @@
+package crane
+
+func NilOption(o *options) {
+	//	o.name = append(o.name, name.StrictValidation)
+}
diff --color -uNr vendor-old/helm.sh/helm/v3/pkg/action/action.patch.go vendor/helm.sh/helm/v3/pkg/action/action.patch.go
--- vendor-old/helm.sh/helm/v3/pkg/action/action.patch.go	1970-01-01 01:00:00.000000000 +0100
+++ vendor/helm.sh/helm/v3/pkg/action/action.patch.go	2021-10-29 09:02:30.629278465 +0200
@@ -0,0 +1,28 @@
+package action
+
+import (
+	"helm.sh/helm/v3/pkg/chart"
+	"helm.sh/helm/v3/pkg/release"
+	"k8s.io/cli-runtime/pkg/resource"
+)
+
+func (i *Install) InstallCRDs(crds []chart.CRD) error {
+	return i.installCRDs(crds)
+}
+
+func (i *Install) ReplaceRelease(rel *release.Release) error {
+	return i.replaceRelease(rel)
+}
+
+func SetMetadataVisitor(releaseName, releaseNamespace string, force bool) resource.VisitorFunc {
+	return setMetadataVisitor(releaseName, releaseNamespace, force)
+}
+
+func (cfg *Configuration) DeleteHookByPolicy(h *release.Hook, policy release.HookDeletePolicy) error {
+	return cfg.deleteHookByPolicy(h, policy)
+}
+
+// recordRelease with an update operation in case reuse has been set.
+func (c *Configuration) RecordRelease(r *release.Release) {
+	c.recordRelease(r)
+}
diff --color -uNr vendor-old/helm.sh/helm/v3/pkg/action/install.patch.go vendor/helm.sh/helm/v3/pkg/action/install.patch.go
--- vendor-old/helm.sh/helm/v3/pkg/action/install.patch.go	1970-01-01 01:00:00.000000000 +0100
+++ vendor/helm.sh/helm/v3/pkg/action/install.patch.go	2021-10-29 09:02:30.630278466 +0200
@@ -0,0 +1,19 @@
+package action
+
+import (
+	"time"
+
+	"helm.sh/helm/v3/pkg/release"
+)
+
+func (i *Install) FailRelease(rel *release.Release, err error) (*release.Release, error) {
+	return i.failRelease(rel, err)
+}
+
+func (cfg *Configuration) ExecHook(rl *release.Release, hook release.HookEvent, timeout time.Duration) error {
+	return cfg.execHook(rl, hook, timeout)
+}
+
+func (i *Install) RecordRelease(r *release.Release) error {
+	return i.recordRelease(r)
+}
